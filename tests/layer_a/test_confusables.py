from core.layer_a.confusables import detect_confusables, script_distribution

# Comprehensive test cases covering all script types and edge cases generated by AI
samples = {
    # 1. Pure Script Types (Legitimate cases)
    "pure_latin": "password",                          # Pure Latin script
    "pure_cyrillic": "пароль",                        # Pure Cyrillic (Russian "password")
    "pure_greek": "κωδικός",                          # Pure Greek ("password")
    "pure_arabic": "كلمة المرور",                       # Pure Arabic ("password")
    "pure_han": "密码",                                # Pure Chinese Han characters ("password")
    "pure_other": "123456!@#",                        # Numbers and symbols (Other)
    
    # 2. Mixed Scripts (Suspicious cases)
    "latin_cyrillic_mixed": "раssword",               # Cyrillic 'р' + Latin 'assword'
    "latin_greek_mixed": "ραssword",                  # Greek 'ρα' + Latin 'ssword'
    "latin_arabic_mixed": "pasسword",                 # Latin + Arabic 'س'
    "latin_han_mixed": "pass密word",                   # Latin + Chinese character
    "multiple_scripts": "раss密ωrd",                   # Multiple scripts mixed
    
    # 3. Homoglyph Attacks (Dangerous confusables)
    "cyrillic_homoglyph": "рassword",                 # Cyrillic 'р' looks like Latin 'p'
    "greek_homoglyph": "ρassword",                    # Greek 'ρ' looks like Latin 'p'
    "fullwidth_attack": "ｐassword",                  # Fullwidth 'ｐ' looks like Latin 'p'
    "mathematical_attack": "𝐩assword",               # Mathematical bold 'p'
    "multiple_homoglyphs": "рαѕѕwοrd",                # Multiple homoglyphs
    
    # 4. Real-world mixed legitimate cases
    "name_with_accents": "José María",                # Legitimate accented characters
    "multilingual_greeting": "Hello مرحبا",           # English + Arabic greeting
    "code_with_greek": "π = 3.14159",                # Mathematical symbols
    "email_mixed": "user@домен.рф",                   # Mixed script domains
    
    # 5. Edge cases
    "empty_string": "",                               # Empty input
    "whitespace_only": "   \t\n  ",                  # Only whitespace
    "numbers_symbols": "123!@#$%^&*()",              # Only numbers and symbols
    "single_char_latin": "a",                        # Single Latin character
    "single_char_cyrillic": "а",                     # Single Cyrillic character (looks like 'a')
    
    # 6. Advanced obfuscation attempts
    "scattered_homoglyphs": "аdmіn pаnеl",           # Multiple scattered Cyrillic chars
    "invisible_chars": "pass\u200bword",             # Zero-width space
    "rtl_override": "admin\u202eresU",               # Right-to-left override
    "combining_chars": "pa̧s̨s̨wo̧ŗd̨",               # Combining diacritical marks
    
    # 7. Long text samples
    "long_pure_latin": "This is a long sentence with only Latin characters for testing purposes.",
    "long_mixed_scripts": "This sentence начинается на English но ends на русском языке.",
    "long_homoglyph_attack": "Thіs sentence looks normаl but contаіns mаny homoglуph chаrаcters.",
}

#This test has been improved for better readability and functionality using AI
def test_confusables():
    """Simple confusables test with minimal output"""
    print("CONFUSABLES DETECTION TEST")
    print("=" * 50)
    
    for test_name, text in samples.items():
        result = detect_confusables(text, expected_script="Latin", threshold=0.1)
        
        # Simple one-line summary
        status = "🔴" if result['is_dangerous'] else "🟡" if result['suspicious'] else "🟢"
        scripts = list(result['script_counts'].keys()) if result['script_counts'] else ['None']
        
        print(f"{status} {test_name:25} | {repr(text[:30]):35} | Scripts: {', '.join(scripts[:3])}")
    
    print("=" * 50)
    print("🔴 = Dangerous | 🟡 = Suspicious | 🟢 = Safe")

def test_script_distribution():
    """Simple script distribution test"""
    print("\nSCRIPT DISTRIBUTION TEST")
    print("=" * 50)
    
    for test_name, text in samples.items():
        dist = script_distribution(text)
        total = sum(dist.values()) if dist else 0
        
        # Format script distribution as percentages
        if total > 0:
            script_summary = []
            for script, count in dist.items():
                pct = (count/total)*100
                script_summary.append(f"{script}:{pct:.0f}%")
            script_str = ", ".join(script_summary)
        else:
            script_str = "Empty"
        
        print(f"{test_name:25} | {repr(text[:30]):35} | {script_str}")

# def run_simple_tests():
#     """Run simple test functions"""
#     test_confusables()
#     test_script_distribution() 
#     test_by_category()

# if __name__ == "__main__":
#     run_simple_tests()